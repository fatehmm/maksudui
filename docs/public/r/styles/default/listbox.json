{
  "name": "listbox",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-scroll-area"
  ],
  "files": [
    {
      "path": "ui/listbox.tsx",
      "content": "'use client';\n\nimport { cn } from '@/registry/default/lib/utils';\nimport { ScrollArea } from '@radix-ui/react-scroll-area';\nimport { Check } from 'lucide-react';\nimport * as React from 'react';\n\nexport interface ListboxOption {\n  label: string;\n  value: string;\n  disabled?: boolean;\n  description?: string;\n}\n\ninterface BaseListboxProps {\n  options: ListboxOption[];\n  className?: string;\n  emptyMessage?: string;\n  searchable?: boolean;\n  searchPlaceholder?: string;\n  icon?: React.ComponentType<{ className?: string }>;\n}\n\ninterface SingleSelectProps extends BaseListboxProps {\n  multiple?: false;\n  value?: string;\n  onChange: (value: string) => void;\n}\n\ninterface MultipleSelectProps extends BaseListboxProps {\n  multiple: true;\n  value?: string[];\n  onChange: (value: string[]) => void;\n}\n\ntype ListboxProps = SingleSelectProps | MultipleSelectProps;\n\nfunction Listbox({\n  options,\n  value,\n  onChange,\n  multiple = false,\n  className,\n  emptyMessage = 'No options available',\n  searchable = false,\n  searchPlaceholder = 'Search...',\n  icon: Icon = Check,\n}: ListboxProps) {\n  const [searchQuery, setSearchQuery] = React.useState('');\n  const [focusedIndex, setFocusedIndex] = React.useState(0);\n  const listRef = React.useRef<HTMLDivElement>(null);\n  const optionRefs = React.useRef<(HTMLDivElement | null)[]>([]);\n\n  const filteredOptions = React.useMemo(() => {\n    if (!searchQuery) return options;\n    const query = searchQuery.toLowerCase();\n    return options.filter(\n      (option) =>\n        option.label.toLowerCase().includes(query) ||\n        option.description?.toLowerCase().includes(query)\n    );\n  }, [options, searchQuery]);\n\n  const isSelected = React.useCallback(\n    (optionValue: string) => {\n      if (multiple) {\n        return (value as string[] | undefined)?.includes(optionValue) ?? false;\n      }\n      return value === optionValue;\n    },\n    [value, multiple]\n  );\n\n  const handleSelect = React.useCallback(\n    (optionValue: string) => {\n      if (multiple) {\n        const currentValue = (value as string[] | undefined) ?? [];\n        const newValue = currentValue.includes(optionValue)\n          ? currentValue.filter((v) => v !== optionValue)\n          : [...currentValue, optionValue];\n        (onChange as (value: string[]) => void)(newValue);\n      } else {\n        (onChange as (value: string) => void)(optionValue);\n      }\n    },\n    [value, onChange, multiple]\n  );\n\n  const handleKeyDown = React.useCallback(\n    (e: React.KeyboardEvent) => {\n      const enabledOptions = filteredOptions.filter((opt) => !opt.disabled);\n      if (enabledOptions.length === 0) return;\n\n      switch (e.key) {\n        case 'ArrowDown': {\n          e.preventDefault();\n          setFocusedIndex((prev) => {\n            const newIndex = prev < enabledOptions.length - 1 ? prev + 1 : 0;\n            optionRefs.current[newIndex]?.scrollIntoView({ block: 'nearest' });\n            return newIndex;\n          });\n          break;\n        }\n        case 'ArrowUp': {\n          e.preventDefault();\n          setFocusedIndex((prev) => {\n            const newIndex = prev > 0 ? prev - 1 : enabledOptions.length - 1;\n            optionRefs.current[newIndex]?.scrollIntoView({ block: 'nearest' });\n            return newIndex;\n          });\n          break;\n        }\n        case 'Enter':\n        case ' ': {\n          e.preventDefault();\n          const focusedOption = enabledOptions[focusedIndex];\n          if (focusedOption) {\n            handleSelect(focusedOption.value);\n          }\n          break;\n        }\n        case 'Home': {\n          e.preventDefault();\n          setFocusedIndex(0);\n          optionRefs.current[0]?.scrollIntoView({ block: 'nearest' });\n          break;\n        }\n        case 'End': {\n          e.preventDefault();\n          setFocusedIndex(enabledOptions.length - 1);\n          optionRefs.current[enabledOptions.length - 1]?.scrollIntoView({\n            block: 'nearest',\n          });\n          break;\n        }\n      }\n    },\n    [filteredOptions, focusedIndex, handleSelect]\n  );\n\n  React.useEffect(() => {\n    if (focusedIndex >= filteredOptions.length) {\n      setFocusedIndex(Math.max(0, filteredOptions.length - 1));\n    }\n  }, [filteredOptions.length, focusedIndex]);\n\n  return (\n    <div className={cn('flex flex-col gap-2', className)}>\n      {searchable && (\n        <div className='px-3 pt-2'>\n          <input\n            type='text'\n            placeholder={searchPlaceholder}\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className='w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background transition-shadow placeholder:text-muted-foreground focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px] focus-visible:ring-ring/50 disabled:cursor-not-allowed disabled:opacity-50'\n          />\n        </div>\n      )}\n      <ScrollArea className='h-full'>\n        <div\n          ref={listRef}\n          role='listbox'\n          aria-multiselectable={multiple}\n          tabIndex={0}\n          onKeyDown={handleKeyDown}\n          className='p-1 outline-none'\n        >\n          {filteredOptions.length === 0 ? (\n            <div className='py-8 text-center text-muted-foreground text-sm'>{emptyMessage}</div>\n          ) : (\n            filteredOptions.map((option, index) => {\n              const selected = isSelected(option.value);\n              const focused = index === focusedIndex;\n\n              return (\n                <div\n                  key={option.value}\n                  ref={(el) => {\n                    optionRefs.current[index] = el;\n                  }}\n                  role='option'\n                  aria-selected={selected}\n                  aria-disabled={option.disabled}\n                  tabIndex={-1}\n                  className={cn(\n                    'relative flex cursor-pointer items-center gap-3 rounded-md px-3 py-2 text-sm outline-none transition-colors',\n                    'hover:bg-accent focus:bg-accent',\n                    selected && 'bg-accent/50',\n                    focused && 'bg-accent/50',\n                    option.disabled && 'cursor-not-allowed opacity-50 hover:bg-transparent'\n                  )}\n                  onClick={() => {\n                    if (!option.disabled) {\n                      handleSelect(option.value);\n                      setFocusedIndex(index);\n                    }\n                  }}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                      e.preventDefault();\n                      if (!option.disabled) {\n                        handleSelect(option.value);\n                      }\n                    }\n                  }}\n                  onMouseEnter={() => !option.disabled && setFocusedIndex(index)}\n                >\n                  <div className='flex flex-1 flex-col gap-0.5'>\n                    <span className='leading-none'>{option.label}</span>\n                    {option.description && (\n                      <span className='text-muted-foreground text-xs'>{option.description}</span>\n                    )}\n                  </div>\n                  <div className='h-4 w-4 shrink-0'>\n                    {selected && Icon && <Icon className='h-4 w-4 text-primary' />}\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}\n\nexport { Listbox };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}