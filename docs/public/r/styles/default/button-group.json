{
  "name": "button-group",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/button-group.tsx",
      "content": "import { Slot } from '@radix-ui/react-slot';\nimport * as React from 'react';\n\nimport { cn } from '@/registry/default/lib/utils';\nimport { Button } from '@/registry/default/ui/button';\n\n/* ---------------------------------- Types --------------------------------- */\nexport type ButtonGroupProps = React.HTMLAttributes<HTMLDivElement> & {\n  /** Size for items in the group; maps to Button sizes. */\n  size?: 'sm' | 'default' | 'pill';\n  /** Disable all actions on buttons within this group. */\n  disabled?: boolean;\n  /** Orientation of the group. */\n  orientation?: 'horizontal' | 'vertical';\n};\n\ntype ButtonGroupContextProps = {\n  size?: ButtonGroupProps['size'];\n  disabled?: ButtonGroupProps['disabled'];\n  orientation?: ButtonGroupProps['orientation'];\n};\n\nexport type ButtonGroupElement = HTMLDivElement;\n\nexport type ButtonGroupItemProps = React.ComponentPropsWithoutRef<typeof Button>;\n\n/* --------------------------------- Context -------------------------------- */\nconst ButtonGroupContext = React.createContext<ButtonGroupContextProps | null>(null);\n\nfunction useButtonGroupContext() {\n  const context = React.useContext(ButtonGroupContext);\n\n  if (!context) {\n    throw new Error('ButtonGroupItem must be used within a ButtonGroup');\n  }\n\n  return context;\n}\n\n/* ------------------------------- Components ------------------------------- */\nconst ButtonGroup = React.forwardRef<HTMLDivElement, ButtonGroupProps>((props, ref) => {\n  const {\n    className,\n    children,\n    size = 'default',\n    disabled = false,\n    orientation = 'horizontal',\n    ...otherProps\n  } = props;\n\n  return (\n    <ButtonGroupContext.Provider value={{ size, disabled, orientation }}>\n      <div\n        ref={ref}\n        className={cn(\n          'inline-flex flex-wrap items-stretch rounded-md',\n          orientation === 'vertical' ? 'flex-col divide-y divide-border' : 'divide-x divide-border',\n          className\n        )}\n        {...otherProps}\n      >\n        {children}\n      </div>\n    </ButtonGroupContext.Provider>\n  );\n});\n\nconst ButtonGroupItem = React.forwardRef<HTMLButtonElement, ButtonGroupItemProps>((props, ref) => {\n  const {\n    asChild = false,\n    children,\n    className,\n    disabled = false,\n    size: _itemSize,\n    ...otherProps\n  } = props;\n\n  const context = useButtonGroupContext();\n  const { disabled: ctxDisabled, orientation = 'horizontal', size = 'default' } = context || {};\n  const effectiveSize = _itemSize ?? size;\n\n  const useAsChild = asChild && React.isValidElement(children);\n  const Component = useAsChild ? Slot : Button;\n\n  return (\n    <Component\n      ref={ref}\n      className={cn(\n        'flex items-center rounded-none focus:ring-0 focus:ring-none focus:ring-offset-0 focus-visible:z-10',\n        'last-of-type:[&+span]:hidden',\n        orientation === 'horizontal'\n          ? effectiveSize === 'pill'\n            ? 'first-of-type:rounded-s-full last-of-type:rounded-e-full'\n            : 'first-of-type:rounded-s-md last-of-type:rounded-e-md'\n          : effectiveSize === 'pill'\n          ? 'first-of-type:rounded-t-full last-of-type:rounded-b-full'\n          : 'first-of-type:rounded-t-md last-of-type:rounded-b-md',\n        className\n      )}\n      disabled={disabled ? disabled : ctxDisabled}\n      size={effectiveSize}\n      {...otherProps}\n    >\n      {children}\n    </Component>\n  );\n});\n\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroupItem.displayName = 'ButtonGroupItem';\n\nexport { ButtonGroupItem };\nexport default ButtonGroup;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}