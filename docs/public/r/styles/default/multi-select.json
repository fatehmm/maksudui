{
  "name": "multi-select",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "checkbox",
    "popover"
  ],
  "files": [
    {
      "path": "ui/multi-select.tsx",
      "content": "'use client';\n\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/registry/default/ui/button';\nimport { ChevronDown, X } from 'lucide-react';\nimport * as React from 'react';\n\nexport interface MultiSelectOption {\n  label: string;\n  value: string;\n}\n\ninterface MultiSelectProps {\n  options: MultiSelectOption[];\n  selected: string[];\n  onChange: (selected: string[]) => void;\n  placeholder?: string;\n  className?: string;\n  emptyMessage?: string;\n  icon?: React.ComponentType<{ className?: string }>;\n}\n\nfunction MultiSelect({\n  options,\n  selected,\n  onChange,\n  placeholder = 'Select items',\n  className,\n  emptyMessage = 'No items found',\n  icon: Icon,\n}: MultiSelectProps) {\n  const [open, setOpen] = React.useState(false);\n\n  function handleToggle(value: string) {\n    const newSelected = selected.includes(value)\n      ? selected.filter((item) => item !== value)\n      : [...selected, value];\n    onChange(newSelected);\n  }\n\n  function handleClearAll(e: React.MouseEvent) {\n    e.stopPropagation();\n    onChange([]);\n  }\n\n  const displayText = React.useMemo(() => {\n    if (selected.length === 0) {\n      return placeholder;\n    }\n\n    const count = selected.length;\n    return `${placeholder} (${count})`;\n  }, [selected, placeholder]);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant='outline'\n          role='combobox'\n          aria-expanded={open}\n          className={cn('w-full justify-between', className)}\n        >\n          <span className='truncate'>{displayText}</span>\n          <div className='ml-2 flex items-center gap-1'>\n            {selected.length > 0 && (\n              <button\n                type='button'\n                onClick={handleClearAll}\n                className='rounded-sm p-0.5 transition-colors hover:bg-accent'\n              >\n                <X className='h-3.5 w-3.5 opacity-50 hover:opacity-100' />\n              </button>\n            )}\n            <ChevronDown className='h-4 w-4 shrink-0 opacity-50' />\n          </div>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='w-full p-0' align='start'>\n        <div className='max-h-80 overflow-y-auto p-1'>\n          {options.length === 0 ? (\n            <div className='py-6 text-center text-muted-foreground text-sm'>{emptyMessage}</div>\n          ) : (\n            <div className='space-y-0.5' role='listbox'>\n              {options.map((option) => {\n                const isSelected = selected.includes(option.value);\n                return (\n                  <div\n                    key={option.value}\n                    role='option'\n                    aria-selected={isSelected}\n                    className={cn(\n                      'flex cursor-pointer items-center gap-2 rounded-md px-3 py-1.5 transition-colors hover:bg-accent',\n                      isSelected && 'bg-accent/50 font-medium'\n                    )}\n                    onClick={() => handleToggle(option.value)}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        handleToggle(option.value);\n                      }\n                    }}\n                    tabIndex={0}\n                  >\n                    <Checkbox\n                      checked={isSelected}\n                      onCheckedChange={() => handleToggle(option.value)}\n                      onClick={(e) => e.stopPropagation()}\n                      tabIndex={-1}\n                    />\n                    <span className='flex-1 text-sm'>{option.label}</span>\n                    {isSelected && Icon && <Icon className='h-4 w-4 text-primary' />}\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n        {selected.length > 0 && (\n          <div className='border-t px-2 py-1.5'>\n            <Button variant='ghost' size='sm' onClick={handleClearAll} className='w-full'>\n              Clear all ({selected.length})\n            </Button>\n          </div>\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nexport { MultiSelect };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}